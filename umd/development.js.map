{"version":3,"sources":["development.es6"],"names":[],"mappings":"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","file":"development.js","sourcesContent":["const invariant = (condition, format, a, b, c, d, e, f) => {\n  if (!condition) {\n    const args = [a, b, c, d, e, f];\n    let argIndex = 0;\n    let error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n    error.name = 'Invariant Violation';\n//    console.log(error.message);\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nconst defaultCommands = {\n  $push: (value, nextObject, spec) => {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: (value, nextObject, spec)  => {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: (value, nextObject, spec, originalObject)  => {\n    invariantSplices(nextObject, spec);\n    value.forEach((args) => {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: (value, nextObject, spec) => {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: (targets, nextObject)  => {\n    invariantSpecArray(targets, '$toggle');\n    let nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: (value, nextObject, spec, originalObject) => {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: (value, nextObject, spec, originalObject) => {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach((pair) => {\n        let key = pair[0];\n        let value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach((value) => {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: (value, nextObject, spec, originalObject)  => {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach((key) => {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: (value, nextObject, spec, originalObject) => {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach((key) => {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: (value, original) => {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst splice = Array.prototype.splice;\nconst toString = Object.prototype.toString;\nconst type = obj => toString.call(obj).slice(8, -1);\nconst assign = Object.assign;\nconst getAllKeys = obj => Object.keys(obj);\n\n/* istanbul ignore next */\nconst copy = (object) => {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object);\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    let prototype = object.constructor && object.constructor.prototype;\n    return assign(Object.create(prototype || null), object);\n  } else {\n    return object;\n  }\n};\n\nlet commands = assign({}, defaultCommands);\nconst update = (object, spec) => {\n\n  if (typeof spec === 'function') {\n    return spec(object);\n  }\n\n  if (!(Array.isArray(object) && Array.isArray(spec))) {\n    invariant(\n      !Array.isArray(spec),\n      'update(): You provided an invalid spec to update(). The spec may ' +\n      'not contain an array except as the value of $set, $push, $unshift, ' +\n      '$splice or any custom command allowing an array value.'\n    );\n  }\n\n  invariant(\n    typeof spec === 'object' && spec !== null,\n    'update(): You provided an invalid spec to update(). The spec and ' +\n    'every included key path must be plain objects containing one of the ' +\n    'following commands: %s.',\n    Object.keys(commands).join(', ')\n  );\n\n  let nextObject = object;\n  let index, key;\n\n  getAllKeys(spec).forEach((key) => {\n    if (hasOwnProperty.call(commands, key)) {\n      let objectWasNextObject = object === nextObject;\n      nextObject = commands[key](spec[key], nextObject, spec, object);\n      if (objectWasNextObject && update.isEquals(nextObject, object)) {\n        nextObject = object;\n      }\n    } else {\n      let nextValueForKey = update(object[key], spec[key]);\n      if (!update.isEquals(nextValueForKey, nextObject[key]) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n        if (nextObject === object) {\n          nextObject = copy(object);\n        }\n        if (type(nextObject) === 'Map') {\n          nextObject.set(key, nextValueForKey);\n        } else {\n          nextObject[key] = nextValueForKey;\n        }\n      }\n    }\n  });\n\n  return nextObject;\n};\n\nupdate.isEquals = (a, b) => { return a === b; };\n\nupdate.extend = (directive, fn) => {\n  commands[directive] = fn;\n};\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  let typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n\nexport {update};"]}